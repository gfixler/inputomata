(defn cterm-rgb [r g b]
  "Pass rgb values, each in range 0-5, inclusive.
  Returns 8-bit cterm color value in range 16-231, inclusive."
  (let [[r g b] (map #(max 0 (min 5 %)) [r g b])]
    (max 16 (min 231 (+ 16 (* r 36) (* g 6) b)))))

(defn cterm-gray [v]
  "Pass gray value in range 0-24, inclusive.
  Returns cterm grayscale value in range 232-255, inclusive."
  (+ 232 (max 0 (min 23 v))))

(let [r (atom 0)
      g (atom 0)
      b (atom 0)
      f (atom true)
      clamp #(max (min % 5) 0)
      cinc #(clamp (inc %))
      cdec #(clamp (dec %))
      cout #(str "r" @r " g" @g " b" @b " ("
                 (cterm-rgb @r @g @b)
                 ") (j/k/f/r/g/b/m/q) " % " ("
                 (if @f "fg" "bg") "): ")]
  (inputomata {:start {:msg "Choose component (r/g/b/q): "
                       \r :red
                       \g :green
                       \b :blue
                       \q nil}
               :red {:msg #(cout "RED")
                     \m :start
                     \g :green
                     \b :blue
                     \f #(swap! f not)
                     \j #(swap! r cdec)
                     \k #(swap! r cinc)
                     \q nil}
               :green {:msg #(cout "GREEN")
                       \m :start
                       \r :red
                       \b :blue
                       \f #(swap! f not)
                       \j #(swap! g cdec)
                       \k #(swap! g cinc)
                       \q nil}
               :blue {:msg #(cout "BLUE")
                      \m :start
                      \r :red
                      \g :green
                      \f #(swap! f not)
                      \j #(swap! b cdec)
                      \k #(swap! b cinc)
                      \q nil}}))

