(defn inputomata [states]
  (loop [cur-state :start]
        (if-let [state (states cur-state)]
                (do (when-let [msg (state :msg)]
                              (print "\r" (repeat " " (- (#*winwidth ".") 1)))
                              (if (string? msg)
                                (print "\r" msg)
                                (print "\r" (msg))))
                  (let [k (nr2char (#*getchar))]
                    (if (contains? state k)
                      (let (v (state k))
                        (if (nil? v)
                          "done"
                          (if (keyword? v)
                            (recur v)
                            (do
                              (v)
                              (recur cur-state)))))
                      (recur cur-state))))
                (throw (str "no '" cur-state "' state")))))

